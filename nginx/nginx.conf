# https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
# TL;DR `upstream` is used for proxying requests to other servers.
upstream backend_gunicorn {
    server backend:8000;
}

server {

    listen 80;

    location / {
        if ($request_method = 'OPTIONS') {
            # Allow any origin
            add_header 'Access-Control-Allow-Origin' '*';
            # Credentials may be cookies, authorization headers or TLS client certificates
            add_header 'Access-Control-Allow-Credentials' 'true';
            # What methods should be allowed when accessing the resource in response to a preflight request
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PUT, OPTIONS';
            # Access-Control-Allow-Headers response header is used in response to a preflight request to indicate which HTTP headers can be used during the actual request.
            add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range';
            # Tell client that this pre-flight info is valid for 20 days
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }

        if ($request_method = 'POST') {
            # Allow any origin (`always` means this header will be added regardless of the response code)
            add_header 'Access-Control-Allow-Origin' '*' always;
            # Credentials may be cookies, authorization headers or TLS client certificates
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            # What methods should be allowed when accessing the resource in response to a preflight request
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PUT, OPTIONS' always;
            # Access-Control-Allow-Headers response header is used in response to a preflight request to indicate which HTTP headers can be used during the actual request.
            add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range' always;
            # The Access-Control-Expose-Headers response header allows a server to indicate which response headers should be made available to scripts running in the browser, in response to a cross-origin request.
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
        }

        if ($request_method = 'GET') {
            # Allow any origin (`always` means this header will be added regardless of the response code)
            add_header 'Access-Control-Allow-Origin' '*' always;
            # Credentials may be cookies, authorization headers or TLS client certificates
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            # What methods should be allowed when accessing the resource in response to a preflight request
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PUT, OPTIONS' always;
            # Access-Control-Allow-Headers response header is used in response to a preflight request to indicate which HTTP headers can be used during the actual request.
            add_header 'Access-Control-Allow-Headers' 'Authorization, DNT, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range' always;
            # The Access-Control-Expose-Headers response header allows a server to indicate which response headers should be made available to scripts running in the browser, in response to a cross-origin request.
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range' always;
        }

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # https://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_redirect
        proxy_redirect off;
        client_max_body_size 100M;

        proxy_pass http://backend_gunicorn;
    }

    location /static/ {
        alias /home/app/backend/staticfiles/;
    }

    location /media/ {
        alias /home/app/backend/mediafiles/;
    }

}